name: PadelCenter CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: "Custom version (optional, overrides release_type)"
        required: false
        type: string

env:
  APP_NAME: PadelCenter
  FLUTTER_VERSION: "3.27.0"
  JAVA_VERSION: "17"

jobs:
  # ====================================
  # 🔍 ANÁLISIS Y VALIDACIÓN
  # ====================================
  analyze:
    name: 📊 Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 🔧 Configure Flutter
        run: |
          flutter config --no-analytics
          flutter config --no-cli-animations

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 🔍 Analyze Code
        run: flutter analyze

      - name: 🧪 Run Tests
        run: flutter test

      - name: 📋 Check Formatting
        run: dart format --output=none --set-exit-if-changed .

  # ====================================
  # 🏗️ BUILD MULTIPLATAFORMA
  # ====================================
  build:
    name: 🏗️ Build ${{ matrix.platform }}
    needs: analyze
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: Android
            os: ubuntu-latest
            build_cmd: flutter build apk --release --split-per-abi
            artifact_path: build/app/outputs/flutter-apk/
            artifact_name: padelcenter-android
          - platform: iOS
            os: macos-latest
            build_cmd: flutter build ios --release --no-codesign
            artifact_path: build/ios/iphoneos/
            artifact_name: padelcenter-ios
          - platform: Web
            os: ubuntu-latest
            build_cmd: flutter build web --release --base-href /padelcenter/
            artifact_path: build/web/
            artifact_name: padelcenter-web

    runs-on: ${{ matrix.os }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Setup Java (Android only)
        if: matrix.platform == 'Android'
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 🔧 Configure Flutter
        run: |
          flutter config --no-analytics
          flutter config --no-cli-animations

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 🔧 Generate App Icons
        run: dart run flutter_launcher_icons

      - name: 📱 Get Version Info
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
          BUILD_NUMBER=$(grep '^version:' pubspec.yaml | cut -d '+' -f 2)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date +'%Y%m%d_%H%M%S')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT

      - name: 🏗️ Build ${{ matrix.platform }}
        run: ${{ matrix.build_cmd }}

      # iOS específico: Crear IPA
      - name: 📦 Create iOS IPA
        if: matrix.platform == 'iOS'
        working-directory: build/ios/iphoneos
        run: |
          mkdir Payload
          mv Runner.app Payload/
          zip -r PadelCenter-v${{ steps.version.outputs.version }}-${{ steps.version.outputs.commit_hash }}.ipa Payload/

      # Android específico: Renombrar APKs
      - name: 📦 Rename Android APKs
        if: matrix.platform == 'Android'
        working-directory: build/app/outputs/flutter-apk
        run: |
          mv app-arm64-v8a-release.apk PadelCenter-v${{ steps.version.outputs.version }}-arm64-v8a.apk || true
          mv app-armeabi-v7a-release.apk PadelCenter-v${{ steps.version.outputs.version }}-armeabi-v7a.apk || true
          mv app-x86_64-release.apk PadelCenter-v${{ steps.version.outputs.version }}-x86_64.apk || true
          mv app-release.apk PadelCenter-v${{ steps.version.outputs.version }}-universal.apk || true

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}
          path: ${{ matrix.artifact_path }}
          retention-days: 30

  # ====================================
  # 🚀 RELEASE Y DEPLOY
  # ====================================
  release:
    name: 🚀 Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📱 Get Current Version
        id: current_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
          BUILD_NUMBER=$(grep '^version:' pubspec.yaml | cut -d '+' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: 🔢 Calculate New Version
        id: new_version
        run: |
          if [ "${{ github.event.inputs.custom_version }}" != "" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          elif [ "${{ github.event.inputs.release_type }}" != "" ]; then
            CURRENT="${{ steps.current_version.outputs.version }}"
            IFS='.' read -r major minor patch <<< "$CURRENT"
            case "${{ github.event.inputs.release_type }}" in
              "major") NEW_VERSION="$((major + 1)).0.0" ;;
              "minor") NEW_VERSION="$major.$((minor + 1)).0" ;;
              "patch") NEW_VERSION="$major.$minor.$((patch + 1))" ;;
            esac
          else
            NEW_VERSION="${{ steps.current_version.outputs.version }}"
          fi
          NEW_BUILD_NUMBER=$(($(date +%s) / 60))
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$NEW_BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: 📝 Update Version in pubspec.yaml
        if: github.event_name == 'workflow_dispatch'
        run: |
          sed -i "s/^version: .*/version: ${{ steps.new_version.outputs.version }}+${{ steps.new_version.outputs.build_number }}/" pubspec.yaml
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          git commit -m "🔖 Bump version to ${{ steps.new_version.outputs.version }}" || exit 0
          git push

      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📋 Generate Release Notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # 🎯 PadelCenter v${{ steps.new_version.outputs.version }}

          ## 📱 Plataformas Disponibles
          - **Android**: APK universal y específicos por arquitectura
          - **iOS**: IPA sin firmar (requiere desarrollo/distribución)
          - **Web**: Aplicación web desplegada automáticamente

          ## 🔧 Información Técnica
          - **Versión**: ${{ steps.new_version.outputs.version }}
          - **Build**: ${{ steps.new_version.outputs.build_number }}
          - **Commit**: $(git rev-parse --short HEAD)
          - **Fecha**: $(date +'%Y-%m-%d %H:%M:%S UTC')

          ## 📦 Archivos Incluidos
          $(find ./artifacts -name "*.apk" -o -name "*.ipa" | sed 's|./artifacts/||' | sed 's/^/- /')

          ## 🚀 Instalación

          ### Android
          1. Descarga el APK universal o específico para tu arquitectura
          2. Habilita "Fuentes desconocidas" en Configuración
          3. Instala el APK

          ### iOS
          1. Requiere cuenta de desarrollador de Apple
          2. Firma el IPA con tu certificado
          3. Instala via Xcode o herramientas de distribución

          ### Web
          Accede directamente a: [PadelCenter Web](https://tu-usuario.github.io/padelcenter/)
          EOF

      - name: 🏷️ Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.new_version.outputs.tag }}
          name: "🎯 PadelCenter v${{ steps.new_version.outputs.version }}"
          body_path: release_notes.md
          files: |
            artifacts/**/*.apk
            artifacts/**/*.ipa
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ====================================
  # 🌐 DEPLOY WEB
  # ====================================
  deploy-web:
    name: 🌐 Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📥 Download Web Artifact
        uses: actions/download-artifact@v4
        with:
          name: padelcenter-web-v*
          path: ./web-build

      - name: 🚀 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./web-build
          cname: padelcenter.tu-dominio.com # Opcional: tu dominio personalizado

  # ====================================
  # 📊 NOTIFICACIONES
  # ====================================
  notify:
    name: 📢 Send Notifications
    needs: [release, deploy-web]
    runs-on: ubuntu-latest
    if: always() && (needs.release.result == 'success' || needs.deploy-web.result == 'success')

    steps:
      - name: 📱 Success Notification
        run: |
          echo "✅ PadelCenter CI/CD Pipeline completed successfully!"
          echo "🔗 Release: ${{ github.server_url }}/${{ github.repository }}/releases/latest"
          echo "🌐 Web App: https://${{ github.repository_owner }}.github.io/padelcenter/"
